{"version":3,"sources":["serviceWorker.js","Components/Header/MenuItems.js","Components/Header/index.js","Components/Footer/Footer.js","Components/Home/Greeting.js","Components/Home/index.js","Components/SnakeApp/ReactKobra.js","Components/SnakeApp/InfoTable.js","Components/SnakeApp/index.js","Components/Router/index.jsx","index.js"],"names":["Boolean","window","location","hostname","match","arr","i","MenuItems","item","map","react_default","a","createElement","key","className","Link","to","concat","Header","Component","Footer","Greeting","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_isMounted","greeting","txt","split","setInterval","setState","prevState","showLetters","shift","replace","componentDidMount","componentWillUnmount","state","id","Home","Greeting_Greeting","SnakeGame","document","addEventListener","e","setDirection","boostSpeed","componentDidUpdate","prevProps","snapshot","start","gameStart","removeEventListener","setSpeed","speed","changeSpeed","appleEat","isPressed","event","_this$props","boost","updateBoost","code","test","gameOver","interval","time","timeBoost","updateTimeBoost","setTimeout","clearInterval","updBoost","boostCount","updateCount","updateStart","_ref","snake","apple","eat","nextState","objectSpread","head","row","direction","y","col","x","body","toConsumableArray","Math","floor","random","pop","isTail","isGameOver","isMaxScore","length","keyCode","_ref2","_ref3","_ref4","_ref5","startAgain","baseSpeed","_ref6","getAppleOnField","newApple","isApple","cell","_this$state","updateScore","isSnake","find","inBody","grid","cols","push","_this2","_this$state2","tabIndex","onKeyPress","onClick","InfoTable","getElementById","showButtons","target","dataset","showButon","buttonsMode","name","updateBaseSpeed","difficulty","updateApples","arguments","undefined","fill","ind","maxScore","score","data-id","toUpperCase","Snake","bool","prevScore","count","InfoTable_InfoTable","ReactKobra_SnakeGame","RouterGo","HashRouter","Components_Header","Switch","Route","path","component","Footer_Footer","ReactDOM","render","Router_RouterGo","basename","process","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8cffb282.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport const arr = ['Home', 'Game'];\r\nlet i = 1;\r\nexport default function MenuItems () {\r\n    const item = arr.map(item=>\r\n      <li key={i++} className='menu-item'>\r\n        <Link to={`${item}`}>{item}</Link>\r\n      </li>\r\n    );\r\n      return (<ul>{item}</ul>)\r\n}\r\n","import React, { Component } from 'react';\r\nimport MenuItems from './MenuItems.js';\r\n// import Snake from '../SnakeApp'\r\n\r\nimport '../../App.css';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header className=\"App-header\">\r\n            <MenuItems />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n// import Snake from '../SnakeApp'\r\n\r\nimport '../../App.css';\r\n\r\nexport default class Footer extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <footer>\r\n        &#9400;  2019\r\n        </footer>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../../App.css';\r\n\r\nexport default class Greeting extends Component {\r\n  _isMounted = false;\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      showLetters: '',\r\n    }\r\n  }\r\n  greeting = () =>{\r\n    let atom = 2;\r\n    let txt = `${atom}Hello Visitor!${atom} Greet to see You!✌️✌️✌️`.split(\"\");\r\n    return setInterval(() => {\r\n      if(!txt[0]) return false\r\n      this.setState((prevState)=> {\r\n         return prevState.showLetters += txt.shift().replace(/[2]/gi, '⚛️')\r\n      })\r\n    }, 50);\r\n\r\n  }\r\n  componentDidMount = () => {\r\n    this._isMounted = true;\r\n    this.greeting()\r\n\r\n  }\r\n  componentWillUnmount = () => {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  render(){\r\n      return (\r\n        <div id='greet'>\r\n          <div className = \"greeting text\" >{\r\n            this._isMounted\r\n            ? <p id=\"Text-show\">{this.state.showLetters}</p>\r\n            : ''\r\n            }\r\n          </div>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../../App.css';\r\nimport Greeting from './Greeting'\r\n\r\nexport default class Home extends Component {\r\n  _isMounted = false;\r\n\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n\r\n    }\r\n  }\r\n  componentDidMount = () => {\r\n    this._isMounted = true;\r\n  }\r\n  componentWillUnmount = () => {\r\n    this._isMounted = false;\r\n  }\r\n  render(){\r\n      return (\r\n        <div>\r\n        <Greeting id='greeting'></Greeting>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../../App.css';\r\nimport './reactkobra.scss';\r\n\r\n/*\r\n// TODO:\r\n  [x] fix timeBoost\r\n  [x] fix updateBoost, need that it dont count apples when boost is ready or active\r\n*/\r\nexport default class SnakeGame extends Component {\r\n  /* constructor\r\n\r\n    in constructor we use  two 'for' loops to generate grid, in first loop we fill the row prop of grid cell, in second loop we fill col prop of the same cell,\r\n    finaly we get cell as {row: value. col: value} and push in into const gridm then push it in the state;\r\n  */\r\n  constructor(props){\r\n    super(props)\r\n    const grid = [];\r\n    for(let row = 0; row < 19; row++){\r\n      let cols = [];\r\n      for(let col = 0; col < 19; col++){\r\n         cols.push({ row, col })\r\n      }\r\n      grid.push(cols)\r\n    }\r\n    this.state = {\r\n      grid,\r\n      apple: {\r\n        row: Math.floor(Math.random() * 19),\r\n        col: Math.floor(Math.random() * 19),\r\n      },\r\n      snake: {\r\n        head: {\r\n          row: 9,\r\n          col: 9\r\n        },\r\n        direction: {\r\n          x: 1,\r\n          y: 0,\r\n        },\r\n        body: [],\r\n      },\r\n      startAgain: false,\r\n      isPressed: false,\r\n    }\r\n  }\r\n  componentDidMount = () => {\r\n    document.addEventListener('keydown', (e)=> {\r\n      this.setDirection(e);\r\n      this.boostSpeed(e);\r\n\r\n    });\r\n\r\n  }\r\n  componentDidUpdate = (prevProps, prevState, snapshot) => {\r\n    if(prevProps.start === !this.props.start){\r\n       this.gameStart();\r\n    }\r\n\r\n  }\r\n  componentWillUnmount = () => {\r\n    document.removeEventListener('keydown', (e)=> {\r\n      this.setDirection(e);\r\n      this.boostSpeed(e);\r\n\r\n    });\r\n }\r\n  /* methods for settings (\r\n\r\n  setSpeed()\r\n   * if snake eat apple, decrease this.props.speed by 20 every time,\r\n   * the smalest speed is 30,\r\n   * if in boost mode snake eat apple,  speed don't change. It always equal to the value    this.props.speed after pressed the 'Space' key\r\n   * return num for setInterval\r\n  boostSpeed()\r\n    * if \"Space\" key pressed and the props boost is 1, divided props.speed by 2,\r\n    * after 5000 ms speed change on speed before activated boost\r\n  updBoost()\r\n    * update props boostCount every time when snake eat apple\r\n    * if props boostCount equal 0, refresh boostCount to default value (3)\r\n  gameStart()\r\n    * if props gameOver true do nothing\r\n    * else we have 2 callback in setState,\r\n     ** 1st callback generate new state for snake head, snake body and apple and if snake don't eat apple we delete last element of snae body array, else return new state\r\n     ** 2nd callback check if game is over  or if snake eatself update props for generate gameOver, else run setInterval with methods updBoost() gameStart(), which update every setSpeed()\r\n   setDirection()\r\n    * set state snake.direction depended on key is pressed\r\n    * if direction x or y is 1 and user try to change it to -1 return false\r\n   gameOver()\r\n    * check if snake head coordinates less or bigger than coordinates of col/row grid update props gameOver, start, and check send score for check is it bigger than previous\r\n   startAgain()\r\n    * change setting to default and start game again\r\n  */\r\n  setSpeed = () => {\r\n    if(this.props.speed < 30) {\r\n      this.props.changeSpeed(30);\r\n    }\r\n    if(this.appleEat()) {\r\n      this.props.changeSpeed(this.props.speed - 20)\r\n      if(this.appleEat() && this.state.isPressed) {\r\n        this.props.changeSpeed(this.props.speed)\r\n      }\r\n    }\r\n\r\n      return this.props.speed\r\n  }\r\n  boostSpeed = (event) => {\r\n    const {boost, updateBoost} = this.props;\r\n    if(event.code === 'Space' && /[1]/gi.test(boost) && !this.props.gameOver) {\r\n\r\n\r\n\r\n      updateBoost('0');\r\n      const speed = this.props.speed;\r\n      this.props.changeSpeed(this.props.speed / 2);\r\n      this.setState({isPressed: true});\r\n      let interval = setInterval(()=> {\r\n        let time = this.props.timeBoost;\r\n        if(!this.props.gameOver)\r\n        this.props.updateTimeBoost(time-1)\r\n      }, 1000)\r\n      if(!this.state.isPressed) {\r\n\r\n        return interval\r\n      }\r\n\r\n\r\n      setTimeout(()=> {\r\n        this.props.changeSpeed(speed)\r\n        clearInterval(interval)\r\n        return this.setState({isPressed: false})\r\n\r\n      }, 5000)\r\n\r\n    }\r\n    return\r\n  }\r\n  updBoost = () => {\r\n    if((this.appleEat() && this.props.boost === '0') && !this.state.isPressed) {\r\n      this.props.updateCount(this.props.boostCount - 1)\r\n      return\r\n    }\r\n    if( this.props.boostCount === 0) {\r\n        this.props.updateCount(3)\r\n        this.props.updateTimeBoost(5)\r\n       return this.props.updateBoost('1');\r\n    }\r\n    return false\r\n  }\r\n  gameStart = () => {\r\n    if(this.props.gameOver) return;\r\n    this.props.updateStart(true)\r\n    this.setState(\r\n      ({snake, apple})=> {\r\n      const eat = this.appleEat();\r\n      const nextState = {\r\n        snake: {\r\n          ...snake,\r\n          head: {\r\n            row: snake.head.row + snake.direction.y,\r\n            col: snake.head.col + snake.direction.x,\r\n          },\r\n          body: [snake.head, ...snake.body]\r\n        },\r\n        apple: eat ? {\r\n          row: Math.floor(Math.random() * 19),\r\n          col: Math.floor(Math.random() * 19),\r\n        } : apple\r\n      }\r\n      if(!eat) nextState.snake.body.pop();\r\n      return nextState\r\n      },\r\n      () => {\r\n      const {snake} = this.state;\r\n\r\n      if(this.gameOver() || this.isTail(snake.head)){\r\n        this.props.updateStart(false);\r\n        this.props.isGameOver(true);\r\n        this.props.isMaxScore(snake.body.length);\r\n        clearInterval(this.gameStart());\r\n        clearInterval(this.updBoost());\r\n        return;\r\n      }\r\n      setTimeout(()=>{\r\n        this.updBoost();\r\n        this.gameStart();\r\n        },\r\n      this.setSpeed());\r\n    });\r\n  }\r\n  setDirection  = (e) => {\r\n    const {snake} = this.state;\r\n    if(e.keyCode === 40){\r\n      if(snake.direction.y === -1) return;\r\n      this.setState( ({snake}) => ({\r\n        snake: {\r\n          ...snake,\r\n          direction: {\r\n            x: 0,\r\n            y: 1,\r\n          }\r\n        }\r\n      }))\r\n    }\r\n    else if(e.keyCode === 39){\r\n      if(snake.direction.x === -1) return;\r\n      this.setState( ({snake}) => ({\r\n        snake: {\r\n          ...snake,\r\n          direction: {\r\n            x: 1,\r\n            y: 0,\r\n          }\r\n\r\n        }\r\n      }))\r\n    }\r\n    else if(e.keyCode === 38){\r\n      if(snake.direction.y === 1) return;\r\n      this.setState( ({snake}) => ({\r\n        snake: {\r\n          ...snake,\r\n          direction: {\r\n            x: 0,\r\n            y: -1,\r\n          }\r\n        }\r\n      }))\r\n    }\r\n    else if(e.keyCode === 37){\r\n      if(snake.direction.x === 1) return;\r\n      this.setState( ({snake}) => ({\r\n        snake: {\r\n          ...snake,\r\n          direction: {\r\n            x: -1,\r\n            y: 0,\r\n          }\r\n        }\r\n      }))\r\n    }\r\n  }\r\n  gameOver  = () => {\r\n    const {snake} = this.state;\r\n    if (snake.head.col < 0\r\n      ||snake.head.row < 0\r\n      ||snake.head.col > 18\r\n      ||snake.head.row > 18)\r\n      {\r\n      this.props.isGameOver(true)\r\n      this.props.updateStart(false);\r\n      this.props.isMaxScore(snake.body.length)\r\n      return true\r\n      }\r\n    return false\r\n\r\n  }\r\n  startAgain = (e) => {\r\n    this.props.changeSpeed(this.props.baseSpeed)\r\n    this.props.updateCount(3)\r\n    this.props.updateBoost('1')\r\n    this.props.isGameOver(false)\r\n    this.props.updateStart(true);\r\n    this.props.updateTimeBoost(5)\r\n    this.setState( ({snake, startAgain}) => {\r\n            return ({\r\n              startAgain: true,\r\n              snake:{\r\n                head: {\r\n                  col: 9,\r\n                  row: 9\r\n                },\r\n                body: [],\r\n                direction: {\r\n                  x: 1,\r\n                  y: 0,\r\n                }\r\n              }\r\n            }\r\n\r\n          )\r\n        })\r\n  }\r\n  /* methods for apple (\r\n  getAppleOnField() generate random apple on field,\r\n  isApple() check apple.row and apple.col with grid coordinates,\r\n  appleEat() check apple.row and apple.col with snake.head coordinates)\r\n  */\r\n  getAppleOnField = () => {\r\n    const {snake} = this.state;\r\n    const newApple = {\r\n      row: Math.floor(Math.random() * 19),\r\n      col: Math.floor(Math.random() * 19),\r\n    };\r\n    if(this.isTail(this.state.apple) || (snake.head.row === this.state.apple.row && snake.head.col === this.state.apple.col)) {\r\n      return this.getAppleOnField();\r\n    }\r\n      return this.setState({\r\n        apple: newApple\r\n      })\r\n\r\n\r\n  }\r\n  isApple = (cell) => {\r\n        const {apple} = this.state;\r\n        return cell.row === apple.row && cell.col === apple.col ? 'apple' : '';\r\n      }\r\n  appleEat = () => {\r\n    const {apple, snake} = this.state;\r\n    this.props.updateScore(snake.body.length);\r\n    return apple.row === snake.head.row && apple.col === snake.head.col;\r\n  }\r\n  /* methods for snake head and snake body (\r\n  isSnake() check snake.head.row and snake.head.col with grid coordinates,\r\n  isTail() tail is array with obj ({col: value, row: value}) I check if coordinates of snake.body equal with grid coordinates return true ,\r\n  */\r\n  isSnake = (cell)=> {\r\n    const {snake} = this.state;\r\n    return cell.row === snake.head.row && cell.col === snake.head.col ? 'snake head' : ''\r\n  }\r\n  isTail = (cell)=> {\r\n    const {snake} = this.state;\r\n\r\n    return snake.body.find(inBody => inBody.row === cell.row && inBody.col === cell.col)\r\n  }\r\n\r\n  render(){\r\n    const {grid, startAgain} = this.state;\r\n    return (\r\n      <div id=\"snake\" tabIndex = \"0\" onKeyPress={this.setDirection}>\r\n\r\n\r\n              <section id='grid'>\r\n                    {\r\n                      grid.map( row => (\r\n                        row.map( cell => (\r\n                          <div\r\n                            key={`${cell.row} ${cell.col}`}\r\n                            className={`cell ${\r\n                              this.isSnake(cell)\r\n                              ?'head':this.isApple(cell)\r\n                              ? 'apple' : this.isTail(cell)\r\n                              ? 'tail' : ''\r\n                            }`}>\r\n                          </div>\r\n                        ))\r\n                      ))\r\n                    }\r\n                </section>\r\n                <div >\r\n                  {\r\n                    this.props.gameOver\r\n                    ? (\r\n                      <div className='modal'>\r\n                        <button onClick={this.startAgain} id='start' >{startAgain ? \"Start Again\" :  'Start game'}</button>\r\n                      </div>\r\n                    )\r\n                    : ''\r\n                  }\r\n                </div>\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../../App.css';\r\nimport './infotable.scss';\r\n\r\nexport default class InfoTable extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    // apple.length = this.props.boostCount;\r\n    // apple.fill('apple-i')\r\n    this.state = {\r\n        apple: [],\r\n        buttonsMode:[\r\n          {name:'easy', speed:900},\r\n          {name:'medium', speed: 600},\r\n          {name:'hard', speed:300}\r\n        ],\r\n        showButon: false,\r\n        difficulty: '',\r\n\r\n    }\r\n  }\r\n  componentDidMount = () => {\r\n\r\n      document.getElementById('showButtons').addEventListener('mouseover', this.showButtons)\r\n  }\r\n  componentWillUnmount = () => {\r\n\r\n      document.getElementById('showButtons').removeEventListener('mouseover', this.showButtons)\r\n  }\r\n  showButtons = (e) => {\r\n    if(e.target.dataset.id === 'showButon'){\r\n      return this.setState({\r\n        showButon: true\r\n      })\r\n    }\r\n    return\r\n  }\r\n  gameStart= () => {\r\n    this.setState({\r\n      showButon: !this.state.showButon,\r\n\r\n    })\r\n    return this.props.gameOver(false)\r\n  }\r\n  changeSpeed = (e) => {\r\n      this.state.buttonsMode.map(item=> {\r\n        if(item.name === e.target.name) {\r\n          this.props.updateBaseSpeed(item.speed)\r\n          return this.props.changeSpeed(item.speed)\r\n        }\r\n        return false\r\n      })\r\n      this.setState({\r\n        difficulty: e.target.name,\r\n        showButon: !this.state.showButon,\r\n      })\r\n      return\r\n\r\n  }\r\n  updateApples = (apple = []) => {\r\n    if(apple.length < this.props.boostCount){\r\n      apple.length = this.props.boostCount;\r\n      apple.fill('apple-i')\r\n    }\r\n    return apple.map((i, ind)=> <div className={i} key={ind} ></div>)\r\n  }\r\n  componentDidUpdate = (prevProps, prevState, snapshot) => {\r\n    this.updateApples()\r\n    if(prevProps.boostCount < this.props.boostCount) {\r\n      // console.log(this.props.boostCount)\r\n    }\r\n  }\r\n  render(){\r\n    return (\r\n      <div  id='showButtons' className=\"wraper\">\r\n        <div className='info'>\r\n          <div className=\"scoreBlock\">\r\n            <div className = 'maxScore-wrap'>\r\n              <div className='maxScore'></div>\r\n              <span>{this.props.maxScore}</span>\r\n            </div>\r\n            <div className = 'score-wrap'>\r\n              <div className='score'></div>\r\n              <span>{this.props.score}</span>\r\n            </div>\r\n            <div className = 'time-wrap'>\r\n              <div className='time'></div>\r\n              <span>{this.props.timeBoost}</span>\r\n            </div>\r\n            <div className = 'boost-wrap'>\r\n              <div className='boost'></div>\r\n              <span className= {this.props.boost === '1' ? 'yes' : 'not'}></span>\r\n            </div>\r\n            <div className='appleshow'>{\r\n                this.props.boost !== '1'\r\n                ? this.updateApples() :\r\n                <div className='space'></div>\r\n              }</div>\r\n              <div className='speedBlock'>\r\n                <div   data-id='showButon' className='speed'></div>\r\n                <div data-id='showButon'>  {\r\n                    (this.state.difficulty === '')\r\n                    ? 'Easy'\r\n                    : this.state.difficulty.replace(this.state.difficulty[0], this.state.difficulty[0].toUpperCase())\r\n                  }</div>\r\n                  {\r\n                     !this.state.showButtons\r\n                     ?  <div id='buttons' className='mode'>\r\n                           {\r\n                             this.state.buttonsMode.map(item=>{\r\n                               return (\r\n                                 (this.state.showButon && !this.props.start)\r\n                                 ?\r\n                                 <button\r\n                                 key={item.speed}  id={item.name}\r\n                                 name={item.name} onClick={this.changeSpeed}\r\n                                 className='button_speed'\r\n\r\n                                 >\r\n                                 {item.name.replace(item.name[0], item.name[0].toUpperCase())}\r\n                                 </button>\r\n                                 : ''\r\n                               )\r\n                             })\r\n                           }\r\n\r\n                       </div>\r\n                       : ''\r\n                  }\r\n              </div>\r\n          </div>\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\n  // <button className={`${ this.state.showButon ? 'show' : 'hide'}`} onClick={this.gameStart} id='start'>Start the game</button>\r\n// <button  id='easy' name='easy' onClick={this.changeSpeed}>Easy</button>\r\n// <button  id='medium' name='medium' onClick={this.changeSpeed}>Medium</button>\r\n// <button  id='hard' name='hard' onClick={this.changeSpeed}>Hard</button>\r\n","import React, { Component } from 'react';\r\nimport SnakeGame from './ReactKobra';\r\nimport InfoTable from './InfoTable';\r\n// import '../../App.css';\r\nimport './style.scss';\r\n\r\nexport default class Snake extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      score: 0,\r\n      maxScore: 0,\r\n      gameOver: true,\r\n      speed: 900,\r\n      baseSpeed: 900,\r\n      start: false,\r\n      boost: '1',\r\n      boostCount: 3,\r\n      timeBoost: 5\r\n    }\r\n  }\r\n  isGameOver = (bool) => {\r\n    return this.setState({\r\n      gameOver: bool,\r\n      score: 0\r\n    })\r\n  }\r\n  isMaxScore = (score) => {\r\n    return this.setState(\r\n      prevScore => prevScore.maxScore < score\r\n                 ? prevScore.maxScore = score\r\n                 : prevScore.maxScore\r\n               )\r\n  }\r\n  updateScore = (score)=> {\r\n      return this.setState({\r\n        score: score\r\n      })\r\n  }\r\n  updateBoost = (boost) => {\r\n    return this.setState({\r\n      boost: boost\r\n    })\r\n  }\r\n  changeSpeed = (speed)=> {\r\n    return this.setState({\r\n      speed: speed\r\n    })\r\n  }\r\n  updateCount = (count) => {\r\n    return this.setState({\r\n      boostCount: count\r\n    })\r\n  }\r\n  updateStart = (start) => {\r\n    return this.setState({\r\n      start: start,\r\n    })\r\n  }\r\n  updateBaseSpeed = (baseSpeed) => {\r\n    return this.setState({\r\n      baseSpeed: baseSpeed\r\n    })\r\n  }\r\n  updateTimeBoost = (timeBoost) => {\r\n    return this.setState({\r\n      timeBoost: timeBoost\r\n    })\r\n\r\n  }\r\n  componentDidMount = () => {\r\n\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    clearInterval(SnakeGame.gameStart)\r\n    return\r\n\r\n\r\n  }\r\n  render(){\r\n    const {score, maxScore, gameOver, speed, start, boost, boostCount, baseSpeed, timeBoost} = this.state;\r\n    return (\r\n      <div id='snakeWrap'>\r\n          <InfoTable\r\n            isGameOver = {this.isGameOver}\r\n            changeSpeed = {this.changeSpeed}\r\n            updateBaseSpeed = {this.updateBaseSpeed}\r\n            score = {score}\r\n            speed = {speed}\r\n            start = {start}\r\n            boost = {boost}\r\n            maxScore = {maxScore}\r\n            baseSpeed = {baseSpeed}\r\n            boostCount = {boostCount}\r\n            timeBoost = {timeBoost}>\r\n          </InfoTable>\r\n          <SnakeGame\r\n            isMaxScore = {this.isMaxScore}\r\n            isGameOver = {this.isGameOver}\r\n            changeSpeed = {this.changeSpeed}\r\n            updateScore = {this.updateScore}\r\n            updateCount = {this.updateCount}\r\n            updateStart = {this.updateStart}\r\n            updateBoost = {this.updateBoost}\r\n            updateTimeBoost = {this.updateTimeBoost}\r\n            boost = {boost}\r\n            start = {start}\r\n            speed = {speed}\r\n            gameOver = {gameOver}\r\n            baseSpeed = {baseSpeed}\r\n            timeBoost = {timeBoost}\r\n            boostCount = {boostCount}>\r\n          </SnakeGame>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Header from '../Header';\r\nimport Footer from '../Footer/Footer.js'\r\nimport Home from '../Home';\r\nimport Snake from '../SnakeApp'\r\nimport {HashRouter , Route, Switch} from 'react-router-dom'\r\n\r\n\r\nexport default class RouterGo extends Component {\r\n  _isMounted = false;\r\n  componentDidMount = () => {\r\n    this._isMounted = true;\r\n  }\r\n  componentWillUnmount = () => {\r\n    this._isMounted = false;\r\n  }\r\n  render (){\r\n\r\n\r\n    return (\r\n      <HashRouter  >\r\n\r\n        <div id='template'>\r\n          <Header ></Header>\r\n          <main>\r\n            <Switch>\r\n              <Route path='/game' component={Snake}/>\r\n              <Route path='/' component={Home}/>\r\n            </Switch>\r\n\r\n\r\n          </main>\r\n          <Footer></Footer>\r\n\r\n\r\n        </div>\r\n\r\n      </HashRouter >\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport RouterGo from './Components/Router/'\n// import MenuItems from './Components/Header/MenuItems';\n// import Header from './Components/Header';\n// import Home from './Components/Home';\n//\n// import Snake from './Components/SnakeApp'\n\n\n\n\n\nReactDOM.render(\n  <RouterGo basename={process.env.PUBLIC_URL}/>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}